(()=>{var e={373:()=>{}},t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}(()=>{"use strict";var e=function(){function e(e,t,n){this.premises=e,this.conslusion=t,this.origin=n}return e.prototype.applicable=function(e){return this.premises.every((function(t){return e.has(t)}))},e}();function t(e,t,n){var o=new Map(t.map((function(e){return[e,null]})));return a(e,o,n)?r(o,n):void 0}function r(e,t,n){void 0===n&&(n=new Set);var a=e.get(t);return!a||n.has(t)?[]:(n.add(t),a.premises.map((function(t){return r(e,t,n)})).reduce((function(e,t){return e.concat(t)}),[]).concat([a]))}function a(e,t,n,r){if(void 0===r&&(r=new Set),t.has(n))return!0;if(r.has(n))return!1;r.add(n);var o=e.filter((function(e){return e.conslusion===n}));e:for(var i=0;i<o.length;i++){for(var c=o[i],u=0;u<c.premises.length;u++)if(!a(e,t,c.premises[u],r))continue e;return t.set(n,c),r.delete(n),!0}return r.delete(n),!1}var o={Edit:i('<path d="M30 7 L25 2 5 22 3 29 10 27 Z M21 6 L26 11 Z M5 22 L10 27 Z" />',"i-edit"),Language:i('<path d="M10 9 L3 17 10 25 M22 9 L29 17 22 25 M18 7 L14 27" />',"i-code"),Delete:i('<path d="M28 6 L6 6 8 30 24 30 26 6 4 6 M16 12 L16 24 M21 12 L20 24 M11 12 L12 24 M12 6 L13 2 19 2 20 6" />',"i-trash"),Add:i('<path d="M16 2 L16 30 M2 16 L30 16" />',"i-plus")};function i(e,t,n){return void 0===n&&(n=24),'<svg id="'+t+'" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="'+n+'" height="'+n+'" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1">'+e+"</svg>"}var c,u=function(){function e(e,t,n){this.button=document.createElement("button"),this.button.innerHTML=t,this.button.addEventListener("click",(function(e){n(),e.preventDefault()})),e.append(this.button)}return Object.defineProperty(e.prototype,"visible",{set:function(e){this.button.style.display=e?"":"none"},enumerable:!1,configurable:!0}),e.prototype.click=function(){this.button.click()},e}();function s(e,t){var n=document.createElement("form");n.addEventListener("submit",(function(e){return e.preventDefault()}));var r=document.createElement("header");r.innerText="Факты",r.title="(ЛКМ - как начальный факт, ПКМ - как искомый)";var a=document.createElement("article");a.classList.add("selectable-list");var i=new Array,s=new Array;new u(r,o.Delete,(function(){return Array().concat(i,s).forEach((function(e){return e.checked=!1}))})),a.append.apply(a,Array.from(e.entries()).sort((function(e,t){return e[1].localeCompare(t[1])})).map((function(e){var t=e[0],n=e[1],r=document.createElement("section");r.classList.add("selectable-line"),r.title=t;var a=document.createElement("input");a.value=t,a.name="isInitial",a.type="checkbox";var o=document.createElement("input");return o.value=t,o.name="isTarget",o.type="radio",r.append(a,n,o),i.push(a),s.push(o),r.addEventListener("mouseup",(function(e){if(e.target==r)switch(e.button){case 0:(a.checked=!a.checked)&&(o.checked=!1);break;case 2:(o.checked=!o.checked)&&(a.checked=!1)}})),r.addEventListener("contextmenu",(function(e){return e.preventDefault()})),r})));("last",new Promise((function(e,t){var n,r=new URL(window.location.href).searchParams.get("data");if(r)try{var a=(n=r,decodeURIComponent(escape(window.atob(n))));return console.log(a),e(JSON.parse(a))}catch(e){console.log(e)}var o=window.localStorage.getItem("last");o&&e(JSON.parse(o))}))).then((function(e){var t=e.initial,n=e.target,r=new Set(t);i.filter((function(e){return r.has(e.value)})).forEach((function(e){return e.checked=!0})),s.filter((function(e){return e.value===n})).forEach((function(e){return e.checked=!0}))}));var l=document.createElement("footer");return l.append.apply(l,[["Прямой",c.Forward],["Обратный",c.Backward]].map((function(e){var n=e[0],r=e[1],a=document.createElement("button");return a.innerText=n,a.addEventListener("click",function(e){return function(n){var r=s.find((function(e){return e.checked}));if(null!=r){var a=i.filter((function(e){return e.checked}));if(0!=a.length){var o=a.map((function(e){return e.value})),c=r.value,u=JSON.stringify({initial:o,target:c});console.log(u),window.localStorage.setItem("last",u);var l,d=new URL(window.location.href);d.searchParams.set("data",(l=u,window.btoa(unescape(encodeURIComponent(l))))),history.pushState(null,"",d.toString()),t(e,o,c)}else alert("Выберите начальные факты")}else alert("Выберите целевой факт")}}(r)),a}))),n.append(r,a,l),n}function l(e,t,n,r,a,o){n.innerHTML="";var i=function(t){var n=document.createElement("span");n.textContent=e.get(t);var r=t.replace(/[)(]/g,"_");return n.classList.add(r),(null==o?void 0:o.has(t))&&n.classList.add("initial-fact"),n.addEventListener("mouseenter",(function(){return a.textContent="."+r+" { background-color: #383a42; font-weight: 700; } .reaction > ."+r+" { outline: dashed 2px lime; }"})),n};n.append.apply(n,t.map((function(e){var t=document.createElement("div");return t.title=e.origin,t.classList.add("reaction"),t.append.apply(t,e.premises.map(i).reduce((function(e,t){return e.length?e.concat(" + ",t):[t]}),new Array)),t.append(" → ",i(e.conslusion)),t.classList.add(e.conslusion.replace(/[)(]/g,"_")),t}))),r.textContent="Правил: "+t.length}!function(e){e[e.Forward=0]="Forward",e[e.Backward=1]="Backward"}(c||(c={})),n(373),Promise.all(["Substances","Chemistry"].map((function(e){return"./resources/"+e+".txt"})).map((function(e){return fetch(e,{method:"GET",headers:{"Content-Type":"text/plain"}}).then((function(e){return e.text()}))}))).then((function(n){var r,a=n[0],o=n[1],i=new Map,u=new Set;a.split("\n").filter((function(e){return""!=e.trim()})).map((function(e){return e.split(" -> ")})).forEach((function(e){return i.set(e[0].trim(),e[1].trim())})),null===(r=o.match(/[A-Za-zС0-9А-Яа-я()]+/g))||void 0===r||r.forEach((function(e){i.get(e)||(u.add(e),i.set(e,e))}));var d=o.split("\n").map((function(e){return e.trim()})).filter((function(e){return""!=e})).map((function(t){var n=t.split(" -> ").map((function(e){return e.split("+").map((function(e){return e.trim()}))})),r=n[0];return n[1].map((function(n){return new e(r,n,t)}))})).reduce((function(e,t){return e.concat(t)}),[]);d.sort((function(e,t){return e.premises.length-t.premises.length}));var p=document.createElement("style");document.body.appendChild(p);var f=document.createElement("article"),m=document.createElement("article"),h=document.createElement("header"),v=document.createElement("section"),w=document.createElement("footer"),g=document.createElement("button");g.textContent="Все правила",g.addEventListener("click",(function(){return l(i,d,m,v,p)})),w.append(v,g),h.textContent="Вывод:",f.append(h,m,w),f.id="output";var L=s(i,(function(e,n,r){try{m.innerHTML="";var a=e==c.Forward?function(e,t,n){for(var r=new Array,a=new Set(e),o=new Set(t);!o.has(n);){var i=Array.from(a.keys()).find((function(e){return e.applicable(o)&&!o.has(e.conslusion)}));if(!i)return;r.push(i),a.delete(i),o.add(i.conslusion)}return r}(d,n,r):t(d,n,r);a?l(i,a,m,v,p,new Set(n)):v.textContent="Не выводимо"}catch(e){v.textContent=e}}));m.innerHTML='<div style="text-align: center;">Справа можно выбрать начальные факты и конечный факт (с помощью чекбоксов или ЛКМ и ПКМ по строчке).<div>',document.querySelector("article").append(f,L)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,